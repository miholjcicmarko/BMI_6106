{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Homework 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. History of Probability\n",
    "It is said that de Mere had been betting that, in four rolls of a die, at least one six would turn up. He was winning consistently and, to get more people to play, he changed the game to bet that, in 24 rolls of two dice, a pair of sixes would turn up. It is claimed that de Mere lost with 24 and felt that 25 rolls were necessary to make the game favorable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. Write function to sample from die\n",
    "sample_die <- function()\n",
    "{\n",
    "    # randomly choose a number between 1 and 6\n",
    "    sample(1:6,1, replace=T)\n",
    "}\n",
    "\n",
    "#2. Write a loop function to tally sucesses vs failures (define sucesses?)\n",
    "suc_fail <- function(n)\n",
    "{\n",
    "    success <- 0\n",
    "    failure <- 0\n",
    "    \n",
    "    for (i in 1:n){\n",
    "        a <- sample_die()\n",
    "        b <- sample_die()\n",
    "        if (a == 6 & b == 6){\n",
    "            success <- success + 1\n",
    "        } else {\n",
    "            failure <- failure + 1\n",
    "        }\n",
    "    }\n",
    "    result <- list(success, failure)\n",
    "    return (result)\n",
    "}\n",
    "\n",
    "#3. Run 10000 trials (24 throws 10000 times - 25 throws 10000 times) keeping track of successes vs faiures (from function 2)\n",
    "\n",
    "trials <- function(times, throws)\n",
    "{\n",
    "    successes <- 0\n",
    "    failures <- 0\n",
    "    \n",
    "    for (k in 1:times){\n",
    "        trial_res <- suc_fail(throws)\n",
    "        \n",
    "        if (trial_res[[1]] >= 1){\n",
    "            successes <- successes + 1\n",
    "        } else{\n",
    "            failures <- failures + 1\n",
    "        }\n",
    "    }\n",
    "    \n",
    "    final_result <- list(successes, failures)\n",
    "    return (final_result)\n",
    "}\n",
    "   \n",
    "a <- trials(10000,24)\n",
    "b <- trials(10000,25)\n",
    "\n",
    "cat(\"Number of successes for 24 throws: \", a[[1]], \" \")\n",
    "cat(\"Number of failures for 24 throws: \", a[[2]], \" \")\n",
    "cat(\"Number of successes for 25 throws: \", b[[1]], \" \")\n",
    "cat(\"Number of failures for 25 throws: \", b[[2]], \" \\n\")\n",
    "\n",
    "#4. Calculate probabilities for 24 rolls and 25 rolls\n",
    "\n",
    "prob_t4 = 1 - ((35/36)**24)\n",
    "cat(\"Probability for 24 rolls: \", prob_t4, \" \")\n",
    "prob_t5 = 1 - ((35/36)**25)\n",
    "cat(\"Probability for 25 rolls: \", prob_t5, \" \")\n",
    "\n",
    "\n",
    "#5. Answer if de Mere was right and that we will win with 25 throws, give a mathematical explanation.\n",
    "# de Mere was right that we have a better chance of winning the game with 25 throws. The chance of winning  \n",
    "# is slightly over 50% when there are 25 throws. When there are only 24 throws, the chance of winning \n",
    "# is slightly under 50%.  \n",
    "# Mathematically, it makes sense that there's a higher chance of success when there's 25 throws. \n",
    "# The probability formula creates larger probabilities for more throws. \n",
    "# The number of throws is equal to the exponent that is applied to the fraction of failures over possible outcomes. \n",
    "# After this term is evaluated, it is subtracted from 1 to obtain the probability.  \n",
    "# Therefore, larger exponents makes the term smaller. As a result, a smaller value is subtracted from 1, and the\n",
    "# probability is larger. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Addition rule\n",
    "\n",
    "#### Find the probabilities using the table\n",
    "\n",
    "\n",
    "> 1. Type O or AB.\n",
    "\n",
    "> 2. Type A or AB.\n",
    "\n",
    "> 3. Type AB or Rh negative. \n",
    "\n",
    "> 4. Type O and Negative. \n",
    "\n",
    "> 5. Type AB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Type     |O    |A    |B    |AB |Total |\n",
    "|:--------|:----|:----|:---------|:-------|:-----|\n",
    "|Positive |163  |662  |1513      |1603    |3941  |\n",
    "|Negative |224  |933  |2400      |2337    |5894  |\n",
    "|Total    |387  |1595 |3913      |3940    |9835  |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1 Type O or AB\n",
    "o_ab = (387+3940)/(9835)\n",
    "cat(\"Probability of Type O or AB: \", o_ab, \" \\n\")\n",
    "\n",
    "#2 Type A or AB\n",
    "a_ab = (1595+3940)/(9835)\n",
    "cat(\"Probability of Type A or AB: \", a_ab, \" \\n\")\n",
    "\n",
    "#3 Type AB or Rh negative\n",
    "ab_rhn = (224+933+2400+2337+1603)/(9835)\n",
    "cat(\"Probability of Type AB or Rh negative: \", ab_rhn, \" \\n\")\n",
    "\n",
    "#4 Type O or negative\n",
    "o_neg = (163+224+933+2400+2337)/(9835)\n",
    "cat(\"Probability of Type O or Negative: \", o_neg, \" \\n\")\n",
    "\n",
    "#5 Type AB\n",
    "ab = (3940)/(9835)\n",
    "cat(\"Probability of Type AB: \", ab, \" \\n\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Multiplication Rule\n",
    "\n",
    "##### Answer questions below using this exercise: If I roll 5 dice, what is the chance of getting all sixes? What is the chance of getting no sixes?\n",
    "\n",
    "Write a simulation in R to obtain the probabilities for each of these two exercises running 10000 trials\n",
    "\n",
    "Hint.\n",
    "\n",
    "Remember that the change to get all 6 in 5 rolls is $(1/6)^5$\n",
    "\n",
    "and to get no sixes is $(5/6)^5$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#All sixes\n",
    "#1. Write function to sample from die\n",
    "sample_die <- function()\n",
    "{\n",
    "    # randomly choose a number between 1 and 6\n",
    "    sample(1:6,1, replace=T)\n",
    "}\n",
    "\n",
    "#2. Write function to determine if in each 5 rolls we get all sixes (6*5)\n",
    "\n",
    "allsixes <- function(n) {\n",
    "    suc = 0\n",
    "    \n",
    "    for (k in 1:5){\n",
    "        one_d = sample_die()\n",
    "        \n",
    "        if (one_d == 6){\n",
    "            suc = suc + 1\n",
    "        }\n",
    "    }\n",
    "    if (suc == 5){\n",
    "        return(\"success\")\n",
    "    }\n",
    "    else{\n",
    "        return(\"failure\")\n",
    "    }\n",
    "}\n",
    "     \n",
    "#3. Run 10000 trials - Hint check sapply function\n",
    "\n",
    "vec <- 1:10000\n",
    "\n",
    "a <- sapply(vec, allsixes)\n",
    "\n",
    "#print(a)\n",
    "\n",
    "succ = 0\n",
    "for (p in 1:length(a)){\n",
    "    if (a[[p]] == 'success'){\n",
    "        succ = succ + 1\n",
    "    }\n",
    "}\n",
    "\n",
    "cat(\"Number of trials that had all sixes: \", succ, \" \\n\")\n",
    "\n",
    "#4. Calculate probabilities \n",
    "allsixes = ((1/6)**5)\n",
    "cat(\"Probability of getting all sixes: \", allsixes, \" \\n\")\n",
    "\n",
    "#No sixes\n",
    "#Repeat 1\n",
    "sample_die <- function()\n",
    "{\n",
    "    # randomly choose a number between 1 and 6\n",
    "    sample(1:6,1, replace=T)\n",
    "}\n",
    "\n",
    "#Repeat 2\n",
    "nosixes <- function(n) {\n",
    "    suc = 0\n",
    "    \n",
    "    for (k in 1:5){\n",
    "        one_d = sample_die()\n",
    "        \n",
    "        if (one_d != 6){\n",
    "            suc = suc + 1\n",
    "        }\n",
    "    }\n",
    "    if (suc == 5){\n",
    "        return(\"success\")\n",
    "    }\n",
    "    else{\n",
    "        return(\"failure\")\n",
    "    }\n",
    "}\n",
    "\n",
    "#Repeat 3\n",
    "vec2 <- 1:10000\n",
    "\n",
    "b <- sapply(vec2, nosixes)\n",
    "\n",
    "#print(b)\n",
    "\n",
    "succ2 = 0\n",
    "for (k in 1:length(b)){\n",
    "    if (b[[k]] == 'success'){\n",
    "        succ2 = succ2 + 1\n",
    "    }\n",
    "}\n",
    "\n",
    "cat(\"Number of trials that had no sixes: \", succ2, \" \\n\")\n",
    "\n",
    "#Repeat 4\n",
    "nosixes = ((5/6)**5)\n",
    "cat(\"Probability of getting no sixes: \", nosixes, \" \\n\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Conditional Probability\n",
    "\n",
    "Consider a family that has three children. We are interested in the children's genders. Our sample space is S={(G,G,G),(G,G,B),(G,B,G),(G,B,B),(B,G,G),(B,G,B),(B,B,G),(B,B,B)}. Also assume that all eight possible outcomes are equally likely.\n",
    "\n",
    "1. What is the probability that the three children are girls given that the first child is a girl?\n",
    "\n",
    "2. What is the probability that At least two children are boys given that the first child is a boy?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1. Three children are girls given that the first child is a girl\n",
    "prob = (1/8)/(0.5)\n",
    "cat(\"Probability of having three girls given the first child is a girl: \", prob, \" \\n\")\n",
    "\n",
    "#2 Probability that At least two children are boys given that the first child is a boy\n",
    "prob2 = (3/8)/0.5\n",
    "cat(\"Probability of having at least two boys given the first child is a boy: \", prob2, \" \\n\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Markov Chains\n",
    "\n",
    "As explained in class, create a function that simulates the following random walk based on the conditional probabilities from the transition matrix:\n",
    "\n",
    "![title](diagram.png)\n",
    "\n",
    "Once the function is created, simulate 500 random walks of 10 steps each (you choose the initial state - can be a constant or a user defined variable). \n",
    "\n",
    "Example of ONE random walk 2,3,2,3,4,4,4,4,4,4 (remember that 0 and 4 are absorbing states). \n",
    "\n",
    "Plot the 500 simulations.\n",
    "\n",
    "Capture each one of the 500 walks last state (at step 10) and create a table of frequencies for each one of the states. it should looks something like\n",
    "\n",
    "|State  |Count|Frequency|\n",
    "|:------|:----|:--------|\n",
    "|0      |100  |0.2      |\n",
    "|1      |100  |0.2      |\n",
    "|2      |100  |0.2      |\n",
    "|3      |100  |0.2      |\n",
    "|4      |100  |0.2      |\n",
    "|total  |500  |1.0      |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##This is an example of the code, but you can create the functions and the plots anyway you want (even in python)\n",
    "\n",
    "library(markovchain)\n",
    "\n",
    "#1. create function that produces a random walk of size N\n",
    "\n",
    "####Random Walk function\n",
    "#N = number of steps in the walk\n",
    "#Ini_prob = initial state\n",
    "Sim_Markov=function(N,Ini_prob) {\n",
    "  #write function that generates one random walk sampling from the initial state....\n",
    "    \n",
    "posStates <- c(\"0\", \"1\", \"2\", \"3\", \"4\")\n",
    "byRow <- TRUE\n",
    "\n",
    "## transitional matrix\n",
    "posMatrix <- matrix(data = c(1, 0, 0, 0, 0,\n",
    "                             0.5, 0, 0.5, 0, 0,\n",
    "                             0, 0.5, 0, 0.5, 0,\n",
    "                             0, 0, 0.5, 0, 0.5,\n",
    "                             0, 0, 0, 0, 1), byrow = byRow, nrow = 5,\n",
    "                        dimnames = list(posStates, posStates))\n",
    "\n",
    "##make the matrix a markovchain class\n",
    "mcPos <- new(\"markovchain\", states = posStates, byrow = byRow,\n",
    "                 transitionMatrix = posMatrix, name = \"State\")\n",
    "\n",
    "##define the initial state\n",
    "initialState <- sample(c(0, 1:4),1,replace=TRUE, prob = Ini_prob)\n",
    "result <- c(as.character(initialState))\n",
    "    \n",
    "     for (k in 1:(N-1)){\n",
    "        pos_matrix_row = posMatrix[(initialState+1),]\n",
    "         \n",
    "        initialState <- sample(c(0, 1:4),1, replace=TRUE, prob = pos_matrix_row)\n",
    "         \n",
    "        result <- c(result, \",\", as.character(initialState))\n",
    "        }\n",
    "    \n",
    "    return(result)\n",
    "}\n",
    "\n",
    "#2. Define the initial state Ini_prob - different examples\n",
    "Ini_prob1=c(0.0005,0.4,0.199,0.4,0.0005)\n",
    "Ini_prob2=c(0.2,0.2,0.2,0.2,0.2)\n",
    "Ini_prob3=c(0,0,1,0,0)\n",
    "\n",
    "#3. Define the transition probabilities matrix\n",
    "P_mat=matrix(0,5,5)\n",
    "P_mat[1,]=c(1,0,0,0,0)\n",
    "P_mat[2,]=c(0.5, 0, 0.5, 0, 0)\n",
    "P_mat[3,]=c(0, 0.5, 0, 0.5, 0)\n",
    "P_mat[4,]=c(0, 0, 0.5, 0, 0.5)\n",
    "P_mat[5,]=c(0, 0, 0, 0, 1)\n",
    "\n",
    "#Number of steps\n",
    "Nst<-10\n",
    "\n",
    "X<-Sim_Markov(Nst,Ini_prob1)\n",
    "Y<-Sim_Markov(Nst,Ini_prob2)\n",
    "Z<-Sim_Markov(Nst,Ini_prob3)\n",
    "\n",
    "cat(\"Simulation1: \", as.character(X), \" \\n\")\n",
    "cat(\"Simulation2: \", as.character(Y), \" \\n\")\n",
    "cat(\"Simulation3: \", as.character(Z), \" \")\n",
    "\n",
    "#e.g. 3,2,1,1,1,1,1,1,1,1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "##plot the 500 simulations\n",
    "options(warn = -1)\n",
    "array_sim <- c(1,2,3,4,5,6,7,8,9,10)\n",
    "array <- c()\n",
    "Ini_prob <- c(0,0,1,0,0)\n",
    "\n",
    "for (k in 1:501){\n",
    "    a <- runif(1)\n",
    "    Ini_prob=c(0.1,sample(1:100,1, replace=T)/100,sample(1:100,1, replace=T)/100,\n",
    "               sample(1:100,1, replace=T)/100,sample(1:100,1, replace=T)/100)\n",
    "    Nst = 10\n",
    "    array <- as.numeric(Sim_Markov(Nst, Ini_prob))\n",
    "    array_sim <- c(array_sim, array[!is.na(array)])\n",
    "}\n",
    "\n",
    "matrix_sim <- matrix(array_sim, nrow= 501, ncol = 10, byrow = TRUE)\n",
    "\n",
    "matrix_sim.df <- as.data.frame(matrix_sim)\n",
    "\n",
    "plot(matrix_sim[1,], matrix_sim[2,], main = \"500 Simulations\", xlab = \"Steps in Random Walk\", ylab=\"States\", \n",
    "    type = \"l\", xlim=c(0, 10), ylim=c(0, 4), col = \"red\")\n",
    "\n",
    "\n",
    "for (p in 3:501) {\n",
    "    if (('0' %in% matrix_sim[p,]) | ('4' %in% matrix_sim[p,])){\n",
    "        lines(matrix_sim[1,],matrix_sim[p,], col=\"red\", type = \"l\")\n",
    "    } \n",
    "    else{\n",
    "        lines(matrix_sim[1,],matrix_sim[p,], col=\"green\", type = \"l\")\n",
    "    }\n",
    "}\n",
    "\n",
    "##an option is to look something like this, where I am plotting each random walk and change the color to red \n",
    "##if the state is 0 or 5, green for the others. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](Random_Walk.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Create table of frequencies\n",
    "library(\"data.table\")\n",
    "data <- matrix_sim.df[,10]\n",
    "table <- data[-1]\n",
    "count0 <- length(which(table == 0))\n",
    "count1 <- length(which(table == 1))\n",
    "count2 <- length(which(table == 2))\n",
    "count3 <- length(which(table == 3))\n",
    "count4 <- length(which(table == 4))\n",
    "total <- length(table)\n",
    "\n",
    "frequency0 <- count0/(length(table))\n",
    "frequency1 <- count1/(length(table))\n",
    "frequency2 <- count2/(length(table))\n",
    "frequency3 <- count3/(length(table))\n",
    "frequency4 <- count4/(length(table))\n",
    "totalf <- 1\n",
    "\n",
    "table <- data.table(\"States\" = c(\"0\",\"1\",\"2\",\"3\",\"4\", \"total\"), \"Count\" = c(count0, count1, count2, count3, count4, total), \n",
    "                    \"Frequency\" = c(frequency0, frequency1, frequency2, frequency3, frequency4, totalf))\n",
    "table\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
